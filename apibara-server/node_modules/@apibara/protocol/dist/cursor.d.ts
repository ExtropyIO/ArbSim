import Long from "long";
import { ICursor } from "./proto/v1alpha2";
export declare const Cursor: {
    /**
     * Creates a new cursor with only the `orderKey` set.
     *
     * Notice that this cursor does not uniquely identify a message in the stream
     * and may result in missing information.
     */
    createWithOrderKey: (order: string | number | Long) => ICursor;
    /**
     * Creates a new cursor with both order and unique keys.
     *
     * This cursor uniquely identifies a message in the stream, even if it has
     * been invalidated.
     */
    create: (order: string | number | Long, unique: Uint8Array) => ICursor;
    /**
     * Creates a new cursor from a plain Javascript object.
     */
    fromObject({ orderKey, uniqueKey }: ReturnType<typeof _toObject>): ICursor;
    /**
     * Returns the cursor string representation.
     */
    toString: (cursor?: ICursor | null) => string | undefined;
    /**
     * Returns the cursor as plain Javascript object.
     */
    toObject: (cursor?: ICursor | null) => ReturnType<typeof _toObject> | undefined;
};
declare function _toObject(cursor: ICursor): {
    orderKey: string;
    uniqueKey: string;
};
export {};
